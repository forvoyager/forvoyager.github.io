[{"title":"代码生成器","date":"2019-06-14T09:01:02.000Z","path":"2019/06/14/代码生成器/","text":"节省时间去陪老婆，就靠你了…… 代码生成工具用于在项目开发过程中生成mapper, mapper xml, dao, service, controller等基础代码，让开发人员不必花费过多的时间在这些基础代码的开发上。 目前生成的是微服务架构代码格式，如果需要MVC风格代码，忽略掉*-client-starter模块的内容即可。 先贴代码…… 使用方法代码信息配置在CodeGenerator类中按照项目/模块的需要，配置好项目信息、作者信息及数据库信息，然后添加需要生成基础代码的表。 12345678910111213141516171819202122232425// 项目名称String projectName = \"micro_service\";// 基础包名String basePackageName = \"com.xr\";// 模块名称String moduleName = \"account\";// 模块名前缀String modulePrefix = \"ms-\";// 作者String author = \"forvoyager@outlook.com\";// 代码存放路径String outputPath = \"./code\";// 数据库配置String url = \"jdbc:mysql://localhost:3306/ms_account_db?characterEncoding=UTF-8\";String driver = \"com.mysql.jdbc.Driver\";String username = \"root\";String password = \"123456\";// 需要去掉的表前缀String skipTablePrefix = \"ms_\";// 需要生成代码的表List&lt;String&gt; tables = new ArrayList&lt;String&gt;();tables.add(\"ms_account\");tables.add(\"ms_user_level\"); 注： 表及字段信息会从数据库获取，所以建表要规范，相关备注、默认值等配置好。 表名中如果有下划线，会转换为驼峰命名规则，如表：ms_funds_data生成的代码形如FundsDataModel，字段名不受此影响。 生成代码执行com.xr.code.generate.CodeGenerator类，会在指定路径（默认是在当前项目路径下）生成代码文件。 最终生成的代码样例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657micro_service └─ms-account ├─ms-account-client-starter │ └─src │ └─main │ └─java │ └─com │ └─xr │ └─account │ └─client │ AccountClient.java │ UserLevelClient.java │ ├─ms-account-common │ └─src │ └─main │ └─java │ └─com │ └─xr │ └─account │ └─common │ ├─controller │ │ IAccountController.java │ │ IUserLevelController.java │ │ │ └─model │ AccountModel.java │ UserLevelModel.java │ └─ms-account-service └─src └─main ├─java │ └─com │ └─xr │ └─account │ ├─controller │ │ AccountController.java │ │ UserLevelController.java │ │ │ ├─mapper │ │ AccountMapper.java │ │ UserLevelMapper.java │ │ │ └─service │ │ IAccountService.java │ │ IUserLevelService.java │ │ │ └─impl │ AccountServiceImpl.java │ UserLevelServiceImpl.java │ └─resources └─mybatis └─mapper account.xml userLevel.xml 其他一些约定 默认所有表都有如下三个字段 123create_time 创建时间update_time 最后修改时间version 数据版本号（用于乐观锁实现） 所有表的更新操作，版本号自动++ 1UPDATE `table` SET version = version + 1 项目中如下路径的文件是代码模板文件，按需调整。 1code-generator/src/main/resources/tpl 项目中如下路径的文件是mybatis基础配置文件，按需调整。 1code-generator/src/main/resources/mybatis 项目中如下路径的文件是mapper和service的基础文件，按需调整。 1code-generator/src/main/java/com/xr/base/core/service","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://forvoyager.github.io/tags/JAVA/"}]},{"title":"github+hexo构建个人博客","date":"2019-06-13T06:12:45.000Z","path":"2019/06/13/github-hexo构建个人博客/","text":"第一篇就写你吧…… 安装Node.js具体安装过程此处不赘述，见官方文档，安装完成后执行下面命令验证是否安装成功： 12&gt;node -vv8.7.0 安装Git这个过程就不赘述了，见官方文档，安装完成后执行下面命令验证是否安装成功： 12&gt;git --versiongit version 2.12.2.windows.2 安装Hexo安装按顺序执行下面命令，进行安装： 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 注：blog是文件夹名字，根据需要自行修改。 按照上面步骤操作，没有报错，正常安装完成后，访问下面地址，能打开说明安装成功。http://localhost:4000/ blog目录中的文件及目录结构（只列了第一级目录）如下所示： 1234567891011E:\\blog│├─node_modules├─public├─scaffolds├─source├─themes├─config.yml├─db.json├─package.json└─package-lock.json 主题设置默认的主题有点丑，换一个主题吧，以hexo-theme-yilia主题为例，更多主题…… 下载主题操作步骤如下： 123cd blog/themeshexo cleangit clone https://github.com/litten/hexo-theme-yilia.git yilia 修改配置修改blog目录下的_config.yml配置文件。 将theme属性，设置为yilia。 在文件最后添加如下配置，显示文章目录。123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 生成目录： 1npm i hexo-generator-json-content --save 验证主题启动本地web服务器： 1hexo server 访问http://localhost:4000/，查看新主题效果。 写文章文章是markdown文档 创建文章执行命令：1hexo new &quot;文章标题&quot; 然后会在source/_posts路径下生成markdown文件。写文章就是按markdown语法编辑此文件。 如果文章太长，可以在文章中任意你想截断的位置加上如下描述： 1&lt;!-- more --&gt; 文章会在此处截断，文章列表页显示截断之前的内容，点击“查看全文”后显示全部内容。 发布博客创建github账户并配置 注册账号，传送门…… 创建仓库 Repository name必须是这种形式：{username}.github.io 配置hexo 修改blog目录下的_config.yml配置文件中的deploy项为如下形式： 12345deploy: type: git repo: &#123;上面创建的仓库地址，如：https://github.com/username/username.github.io.git&#125; branch: master message: &quot;git commit时的备注信息，自行调整&quot; 发布执行下面命令，发布博客，其实就是生成博客页面，然后上传到github仓库中。 1hexo clean &amp;&amp; hexo deploy 提交过程中会提示输入github用户名和密码。 访问博客传送门","comments":true,"tags":[{"name":"未分类","slug":"未分类","permalink":"http://forvoyager.github.io/tags/未分类/"}]}]